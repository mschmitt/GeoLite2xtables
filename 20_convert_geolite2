#!/usr/bin/perl

# MIT License

# Copyright (c) 2018 Martin Schmitt

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

use warnings;
use strict;
use diagnostics;
use NetAddr::IP;
use Getopt::Long;
use Text::CSV;

my $quiet = 0;
my $geoipnames = 0;
GetOptions(
    'quiet' => \$quiet,
    'geoipnames' => \$geoipnames
    ) or die("bad args");

unless(-s "$ARGV[0]"){
	print STDERR "Specify Country DB to use on the command line.\n";
	exit 1;
}

# Prime country data with additional continent codes
# http://download.geonames.org/export/dump/readme.txt
my $countryinfo;
$countryinfo->{'6255146'}->{'code'} = 'AF';
$countryinfo->{'6255146'}->{'name'} = 'Africa';
$countryinfo->{'6255147'}->{'code'} = 'AS';
$countryinfo->{'6255147'}->{'name'} = 'Asia';
$countryinfo->{'6255148'}->{'code'} = 'EU';
$countryinfo->{'6255148'}->{'name'} = 'Europe';
$countryinfo->{'6255149'}->{'code'} = 'NA';
$countryinfo->{'6255149'}->{'name'} = 'North America';
$countryinfo->{'6255150'}->{'code'} = 'SA';
$countryinfo->{'6255150'}->{'name'} = 'South America';
$countryinfo->{'6255151'}->{'code'} = 'OC';
$countryinfo->{'6255151'}->{'name'} = 'Oceania';
$countryinfo->{'6255152'}->{'code'} = 'AN';
$countryinfo->{'6255152'}->{'name'} = 'Antarctica';

# Read the countryinfo file
open my $fh_in, "<", "$ARGV[0]" or die "Can't open $ARGV[0]: $!\n";
my $csv = Text::CSV->new({binary => 1});

if (!$geoipnames) {
    $csv->sep_char("\t");
}
foreach my $line (<$fh_in>){
	chomp $line;
	next if ($line =~ /^#/ || $line eq '' || $line !~ /^[\d]/);
	$csv->parse($line) or die("bad countryinfo input");
	my @fields = $csv->fields();
	my $code;
	my $name;
	my $id;
	if (!$geoipnames) {
		$code = $fields[0];
		$name = $fields[4];
		$id   = $fields[16];
	} else {
		$code = $fields[4];
		$name = $fields[5];
		if ($code eq '' || $name eq '') {
			$code = $fields[2];
			$name = $fields[3];
		}
		$id   = $fields[0];
	}
	$countryinfo->{$id}->{'code'} = $code;
	$countryinfo->{$id}->{'name'} = $name;
}
close $fh_in;

$csv->sep_char(',');
# Convert actual GeoLite2 data from STDIN
my $csv_out = Text::CSV->new({always_quote => 1, binary => 1});
my $counter;
foreach my $line (<STDIN>){
	next unless ($line =~ /^\d/);
	chomp $line;
	$csv->parse($line) or die("bad GeoIP2 input");
	$counter++;
	my @fields = $csv->fields();
	my $network = $fields[0];
	my $geoname_id = $fields[1];
	my $registered_country_geoname_id = $fields[2];
	my $represented_country_geoname_id = $fields[3];
	my $is_anonymous_proxy = $fields[4];
	my $is_satellite_provider = $fields[5];
	my $ip = NetAddr::IP->new($network);
	my $start_ip = $ip->canon();
	my $end_ip = $ip->broadcast();
	my $start_int = $ip->numeric();
	my $end_int = $end_ip->numeric();
	my $code;
	my $name;
	if ($is_anonymous_proxy){
		$code = "A1";
		$name = "Anonymous Proxy";
	}elsif ($is_satellite_provider){
		$code = "A2";
		$name = "Satellite Provider";
	}elsif($countryinfo->{$represented_country_geoname_id}){
		$code = $countryinfo->{$represented_country_geoname_id}->{'code'};
		$name = $countryinfo->{$represented_country_geoname_id}->{'name'};
	}elsif($countryinfo->{$registered_country_geoname_id}){
		$code = $countryinfo->{$registered_country_geoname_id}->{'code'};
		$name = $countryinfo->{$registered_country_geoname_id}->{'name'};
	}elsif($countryinfo->{$geoname_id}){
		$code = $countryinfo->{$geoname_id}->{'code'};
		$name = $countryinfo->{$geoname_id}->{'name'};
	}else{
		print STDERR "Unknown Geoname ID, panicking. This is a bug.\n";
		print STDERR "ID: $geoname_id\n";
		print STDERR "ID Registered: $registered_country_geoname_id\n";
		print STDERR "ID Represented $represented_country_geoname_id\n";
		exit 1;
	}

	# Legacy GeoIP listing format:
	# "1.0.0.0","1.0.0.255","16777216","16777471","AU","Australia"
	$csv_out->say(*STDOUT, [$start_ip, $end_ip->canon(), $start_int, $end_int, $code, $name]);
	if (!$quiet && $counter % 10000 == 0) {
		print STDERR "$counter\n";
	}
}
